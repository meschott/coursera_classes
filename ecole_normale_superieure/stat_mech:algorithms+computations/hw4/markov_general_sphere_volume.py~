import random, sys, math
import matplotlib.pyplot as plt
import numpy as np

d = int(sys.argv[1])
Volume_analytical = []

def V_sph(dim):
    return math.pi ** (dim / 2.0) / math.gamma(dim / 2.0 + 1.0)

for dim in range(1, d+1):
    Volume_analytical.append(V_sph(dim))

#d = d - 1
#x = [0.0] * d 
delta = 0.1
n_trials = 1000000
n_hits = 0
old_radius_square = 0
new_radius_square = 0
Q = 2
Volume = [2]
print "computing volume of the unit spheres up to", d, " dimensions"

for i in range(1,d):
    x = [0.0] * i
    for j in range(n_trials):
        k = random.randint(0, i-1)
        x_old_k = x[k]
        x_new_k = x_old_k + random.uniform(-delta, delta)
        new_radius_square = old_radius_square + x_new_k ** 2 - x_old_k ** 2
        if new_radius_square < 1.0:
            x[k] = x_new_k
            old_radius_square = new_radius_square
            alpha = random.uniform(-1.0,1.0)
            if new_radius_square + alpha**2 < 1.0: n_hits += 1
    Q = Q * 2 * n_hits/float(n_trials)
    Volume.append(Q)
    print "Q[",i+1,"]", "=", 2.0 * n_hits / float(n_trials)
    n_hits = 0
    old_radius_square = 0
print "V[",d,"]=",Q
print Volume
n = np.arange(1,d+1,1)
print n
plt.plot(n, Volume,ls='dotted')
plt.plot(n, Volume_analytical)
plt.yscale('log')
plt.xlabel('dimension')
plt.ylabel('volume')
plt.title('Computed volume(dotted line) and analytical volume (solid line)')
plt.savefig("hw_c1.png")
plt.show()
#plt.hist(r, bins = 100, normed = True)
#n = np.arange(0, 1, 0.01)
#plt.plot(n, 20 * n ** 19)
#plt.xlabel("bins")
#plt.ylabel("frequency")
#plt.title("normalized radius frequency fitted with 20*(r ** 19)")
#plt.savefig("hw_b1.png")
#plt.show()

