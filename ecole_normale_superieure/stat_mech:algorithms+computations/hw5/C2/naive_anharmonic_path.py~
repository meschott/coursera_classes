import math, random
import matplotlib.pyplot as plt

#Compute the anharmonic potential
def V(x,cubic,quartic):
    pot = x ** 2 / 2.0 + cubic * x ** 3 + quartic * x ** 4
    return pot

def read_file(filename):
    list_x = []
    list_y = []
    with open(filename) as f:
        for line in f:
            x, y = line.split()
            list_x.append(float(x))
            list_y.append(float(y))
    f.close()
    return list_x, list_y

def rho_free(x, y, beta):    # free off-diagonal density matrix
    return math.exp(-(x - y) ** 2 / (2.0 * beta))

cubic = -1.0
quartic = 1.0
beta = 4.0
N = 16                                            # number of slices
dtau = beta / N
delta = 1.0                                       # maximum displacement on one slice
n_steps = 10 ** 6                                 # number of Monte Carlo steps
x = [0.0] * N                                     # initial path
x_slice = []
slice = 0
for step in range(n_steps):
    k = random.randint(0, N - 1)                  # random slice
    knext, kprev = (k + 1) % N, (k - 1) % N       # next/previous slices
    x_new = x[k] + random.uniform(-delta, delta)  # new position at slice k
    old_weight  = (rho_free(x[knext], x[k], dtau) *
                   rho_free(x[k], x[kprev], dtau) *
                   math.exp(-dtau * V(x[k], cubic, quartic)))
    new_weight  = (rho_free(x[knext], x_new, dtau) *
                   rho_free(x_new, x[kprev], dtau) *
                   math.exp(-dtau* V(x_new, cubic, quartic)))
    if random.uniform(0.0, 1.0) < new_weight / old_weight:
        x[k] = x_new
    if step % 10 == 0:
        x_slice.append(x[slice])
    
plt.hist(x_slice, 100, normed = True, label = "x slice from path integral")
a,b = read_file("../C1/data_harm_matrixsquaring_beta4.0.dat")
plt.plot(a, b, label ="x from matrix multiplication")
plt.xlim(-2.0,2.0)
plt.title("Path integral x sampling")
plt.xlabel("x")
plt.ylabel("frequency")
plt.legend(loc = 'upper left', shadow = True, fontsize = 'medium')
plt.savefig("C2_slice_%i" % slice)
plt.show()
